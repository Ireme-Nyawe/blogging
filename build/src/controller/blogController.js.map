{"version":3,"file":"blogController.js","names":["_blogModel","_interopRequireDefault","require","_cloud","createBlog","exports","_ref","_asyncToGenerator2","_regenerator","mark","_callee","req","res","_result","_result2","_req$body","blogImage","title","header","contents","checkTitle","result","blog","wrap","_callee$","_context","prev","next","body","blogTable","findOne","email","sent","abrupt","status","json","message","file","uploadToCloud","create","secure_url","author","userTable","lname","data","t0","error","stop","_x","_x2","apply","arguments","viewAllBlogs","_ref2","_callee2","viewblogs","_callee2$","_context2","find","statusbar","_x3","_x4","viewOneBlog","_ref3","_callee3","id","viewblog","_callee3$","_context3","params","findById","_x5","_x6","updateBlog","_ref4","_callee4","_result3","_result4","checkId","_req$body2","_callee4$","_context4","findByIdAndUpdate","_x7","_x8","deleteBlog","_ref5","_callee5","delBlog","_callee5$","_context5","findByIdAndDelete","_x9","_x10"],"sources":["../../../src/controller/blogController.js"],"sourcesContent":["import blogTable from \"../models/blogModel\";\r\nimport { uploadToCloud } from \"../helper/cloud\";\r\n// https://res.cloudinary.com/ddlzcnyhe/image/upload/v1696595213/cld-sample.jpg\r\n\r\nexport const createBlog = async(req,res) =>{\r\n    try {\r\n        const {blogImage,title,header,contents} = req.body;\r\n        const checkTitle = await blogTable.findOne({\r\n          email: req.body.title,\r\n      });\r\n      \r\n      if(checkTitle){\r\n          return res.status(500).json({\r\n              status : 500,\r\n              message : \"Blog With This Title Already Exist, Try Another!\", \r\n          })\r\n      }\r\n        let result;\r\n        if(req.file){\r\n            result = await uploadToCloud(req.file,res);\r\n        }\r\n        const blog = blogTable.create({\r\n                blogImage : result?.secure_url || \"https://res.cloudinary.com/ddlzcnyhe/image/upload/v1696595213/cld-sample.jpg\",\r\n                title,\r\n                header,\r\n                contents,\r\n                author: req.userTable.lname\r\n\r\n            })\r\n\r\n            return res.status(200).json({\r\n                message : \"Blog Created SuccessFully.\",\r\n                data: \r\n                {\r\n                    blogImage : result?.secure_url,\r\n                title,\r\n                header,\r\n                contents,\r\n                author: req.userTable.lname\r\n                }\r\n            })\r\n    } catch (error) {\r\n        return res.status(500).json({\r\n            message : \"Failed To Create A Blog!\",\r\n            error : error.message,\r\n        })\r\n    }\r\n};\r\n\r\n// view all blogs\r\nexport const viewAllBlogs = async (req,res) =>{\r\n    try {\r\n      const viewblogs = await blogTable.find();\r\n      return res.status(200).json({\r\n        status : \"200\",\r\n        message : \"All Blogs Retrieved, Check Below:\",\r\n        data : viewblogs,\r\n      })\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        statusbar: \"500\",\r\n        message: \"Failed To Retrieve Users Information\",\r\n        error: error.message,\r\n  \r\n      });\r\n      \r\n    }\r\n  };\r\n\r\n//   View One Blog\r\n  export const viewOneBlog = async (req,res) =>{\r\n    try {\r\n        const {id}= req.params;\r\n      const viewblog = await blogTable.findById(id)\r\n      return res.status(200).json({\r\n        status : \"200\",\r\n        message : \"A Blog Retrieved, Check Below:\",\r\n        data : viewblog,\r\n      })\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        statusbar: \"500\",\r\n        message: \"Failed To Retrieve Blog Information\",\r\n        error: error.message,\r\n  \r\n      });\r\n      \r\n    }\r\n  };\r\n\r\n//   update blog\r\nexport const updateBlog = async(req,res) =>{\r\n    try {\r\n        const {id}=req.params;\r\n        const checkId=await blogTable.findById(id);\r\n        if(!checkId){\r\n            return res.status(404).json({\r\n                message : \"Id Do Not Correspond To Any Blog!\",\r\n            })\r\n        };\r\n\r\n        const {blogImage,title,header,contents} = req.body;\r\n        let result;\r\n        if(req.file){\r\n            result = await uploadToCloud(req.file,res);\r\n        }\r\n        const blog = blogTable.findByIdAndUpdate(id,{\r\n                blogImage : result?.secure_url || \"https://res.cloudinary.com/ddlzcnyhe/image/upload/v1696595213/cld-sample.jpg\",\r\n                title,\r\n                header,\r\n                contents,\r\n                author: req.userTable.lname\r\n\r\n            })\r\n\r\n            return res.status(200).json({\r\n                message : \"Blog Updated SuccessFully, Check Below:\",\r\n                data: \r\n                {\r\n                blogImage : result?.secure_url,\r\n                title,\r\n                header,\r\n                contents,\r\n                author: req.userTable.lname\r\n                }\r\n            })\r\n    } catch (error) {\r\n        return res.status(500).json({\r\n            message : \"Failed To Update A Blog!\",\r\n            error : error.message,\r\n        })\r\n    }\r\n};\r\n\r\n// delete A blog\r\nexport const deleteBlog = async (req, res) => {\r\n    try {\r\n      const { id } = req.params;\r\n      const checkId = await blogTable.findById(id);\r\n      if (!checkId)\r\n        return res.status(404).json({\r\n          message: \"Id not Found\",\r\n        });\r\n  \r\n      const delBlog = await blogTable.findByIdAndDelete(id);\r\n      return res.status(201).json({\r\n        statusbar: \"Succcess\",\r\n        message: \"Blog  Deleteded Sucessfully, See Deleted Blog Below: \",\r\n        data: delBlog,\r\n      });\r\n    } catch (error) {\r\n      return res.status(500).json({\r\n        message: \"Failed To Delete Blog!\",\r\n        error: error.message,\r\n      });\r\n    }\r\n  };\r\n"],"mappings":"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"}